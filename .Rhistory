## a pair of functions that cache the inverse of a matrix
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be our "solve"
#next three functions will be used by cacheSolve to get data for s
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve} #если не работает везде SolvedMatrix на solve
getSolvedMatrix <- function() {m}
list(get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix)
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
m <- sovle(data, ...)
x$setSolvedMatrix(s)
s
}
bigmat <- matrix(sample.int(100, size=9,replace=TRUE), nrow=3)
bigmat
d <- makeCacheMatrix(bigmat)
cachesolve(d)
cacheSolve(d)
##ДОБАВИТЬ!!!!!
## a pair of functions that cache the inverse of a matrix
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be our "solve"
#next three functions will be used by cacheSolve to get data for s
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve} #если не работает везде SolvedMatrix на solve
getSolvedMatrix <- function() {s}
list(get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix)
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
m <- sovle(data, ...)
x$setSolvedMatrix(s)
s
}
d <- makeCacheMatrix(bigmat)
cacheSolve(d)
##ДОБАВИТЬ!!!!!
## a pair of functions that cache the inverse of a matrix
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be our "solve"
#next three functions will be used by cacheSolve to get data for s
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve} #если не работает везде SolvedMatrix на solve
getSolvedMatrix <- function() {s}
list(get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix)
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
m <- solve(data, ...)
x$setSolvedMatrix(s)
s
}
d <- makeCacheMatrix(bigmat)
cacheSolve(d)
##ДОБАВИТЬ!!!!!
## a pair of functions that cache the inverse of a matrix
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be our "solve"
set <- function(y){
x <<- y
m <<- NULL
}
#next three functions will be used by cacheSolve to get data for s
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve} #если не работает везде SolvedMatrix на solve
getSolvedMatrix <- function() {s}
list(get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix)
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolvedMatrix(s)
s
}
d <- makeCacheMatrix(bigmat)
cacheSolve(d)
m <- matrix(3,3)
m <- matrix(30, 72, 87, 96, 74, 46, 86, 85, 57)
m
??matrix
matrix()
## a pair of functions that cache the inverse of a matrix
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be our "solve"
set <- function(y){
x <<- y
m <<- NULL
}
#next three functions will be used by cacheSolve to get data for s
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve}
getSolvedMatrix <- function() {s}
list(set = set, get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix)
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolvedMatrix(s)
s
}
A = matrix()
## a pair of functions that cache the inverse of a matrix
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be our "solve"
set <- function(y){
x <<- y
m <<- NULL
}
#next three functions will be used by cacheSolve to get data for s
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve}
getSolvedMatrix <- function() {s}
list(set = set, get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix)
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolvedMatrix(s)
s
}
d <- matrix(
c(30, 96, 86, 72, 74, 85, 87, 46, 57)
nrow=3
ncol=3
)
d <- matrix(
c(30, 96, 86, 72, 74, 85, 87, 46, 57)
nrow=3
ncol=3
byrow = TRUE
)
d = matrix(
c(30, 96, 86, 72, 74, 85, 87, 46, 57)
nrow=3
ncol=3
byrow = TRUE
)
d = matrix(
+c(30, 96, 86, 72, 74, 85, 87, 46, 57)
+nrow=3
+ncol=3
+byrow = TRUE
)
d = matrix(
+ c(30, 96, 86, 72, 74, 85, 87, 46, 57)
+ nrow=3
+ ncol=3
+ byrow = TRUE
)
> A = matrix(
+   c(2, 4, 3, 1, 5, 7), # the data elements
+   nrow=2,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)        # fill matrix by rows
d = matrix(
+ c(30, 96, 86, 72, 74, 85, 87, 46, 57),
+ nrow=3,
+ ncol=3,
+ byrow = TRUE)
> A = matrix(
nrow=2,              # number of rows
ncol=3,              # number of columns
byrow = TRUE)        # fill matrix by rows
d = matrix( )
d <- matrix(
+ c(30, 96, 86, 72, 74, 85, 87, 46, 57),
+ nrow=3,
+ ncol=3,
+ byrow = TRUE)
d <- matrix(c(30, 96, 86, 72, 74, 85, 87, 46, 57), nrow=3, ncol=3, byrow = TRUE)
d1 <- makeCacheMatrix(d)
cacheSolve(d1)
cacheSolve(d1)
## Catching the Data of Inversed Matrix (a pair of functions that cache the inverse of a matrix)
## this function creates a special object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
s <- NULL # s will be the data of my "solved" matrix
set <- function(y){ #takes an input matrix
x <<- y #saves the input matrix
s <<- NULL #reserts the s to NULL (when a new object is generated)
}
#----next three functions will be used by cacheSolve to get data for s:
get <- function() {x} #returns the value of original matrix
setSolvedMatrix <- function(solve) {s <<- solve} #called by cacheSolve() during the first access
#and it will store the value using super-assignment (i.e. "<<-")
getSolvedMatrix <- function() {s} # this will return the cached value to cacheSolve on subsequent accesses
list(set = set, get = get, setSolvedMatrix = setSolvedMatrix, getSolvedMatrix = getSolvedMatrix) #a list of internal functions
}
## this function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## if the inverse has already been calculated (and the matrix has not changed), then the cachesolve retrieves the inverse from the cache.
cacheSolve <- function(x, ...) {
s <- x$getSolvedMatrix()
if(!is.null(s)) {
message("getting inversed matrix")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setSolvedMatrix(s)
s
}
d1 <- makeCacheMatrix(d)
d1 <- makeCacheMatrix(d)
cacheSolve(d1)
> set.seed(77)
> m <- matrix(sample.int(100,size=16,replace=TRUE), nrow=4)
> d <- makeCacheMatrix(m)
> cacheSolve(d)
set.seed(77)
m <- matrix(sample.int(100,size=16,replace=TRUE), nrow=4)
d <- makeCacheMatrix(m)
cacheSolve(d)
t <- matrix(c(30, 96, 86, 72, 74, 85, 87, 46, 57), nrow=3, ncol=3, byrow = TRUE)
d2 <- makeCacheMatrix(t)
cacheSolve(t)
cacheSolve(d2)
cacheSolve(d)
d <- matrix(c(30, 778, 86, 720, 74, 815, 87, 46, 57), nrow=3, ncol=3, byrow = TRUE)
cacheSolve(d)
d1 <- matrix(c(30, 778, 86, 720, 74, 815, 87, 46, 57), nrow=3, ncol=3, byrow = TRUE)
d <- makeCacheMatrix(d1)
cacheSolve(d)
set.seed(77)
m <- matrix(sample.int(100,size=16,replace=TRUE), nrow=4)
d <- makeCacheMatrix(m)
cacheSolve(d)
